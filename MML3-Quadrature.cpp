#include"MML3-quadrature.h"

namespace MML3
{


const double* gauss_quadrature::getX(int ngp)
{

	if(ngp >size_ || ngp<1)
		return 0;
	return X_[ngp-1];
}

const double* gauss_quadrature::getW(int ngp)
{

	if(ngp >size_ || ngp<1)
		return 0;
	return W_[ngp-1];
}




//////////////////////////////////////////////////////////////////////
// Implementazione formule di quadratura 1D
//i punti sono verificati essere le radici dei polinomi di Legendre. Sui libri c'è spesso qualche cifra sbagliata
// http://pomax.github.io/bezierinfo/legendre-gauss.html


const double gauss_quadrature::X_[size_][size_]=
{
	{+0.000000000000000},
	{-0.577350269189626, +0.577350269189626  },
	{-0.774596669241483, +0.000000000000000, +0.774596669241483 },						
	{-0.861136311594053, -0.339981043584856, +0.339981043584856, +0.861136311594053},	
	{-0.906179845938664, -0.538469310105683, +0.000000000000000, +0.538469310105683, +0.906179845938664},
	{-0.932469514203152, -0.661209386466265, -0.238619186083197, +0.238619186083197, +0.661209386466265, +0.932469514203152},
	{-0.9491079123427585,-0.7415311855993945,-0.4058451513773972,0.0000000000000000,0.4058451513773972,0.7415311855993945,0.9491079123427585},
	{-0.9602898564975363,-0.7966664774136267,-0.5255324099163290,-0.1834346424956498,0.1834346424956498,0.5255324099163290,0.7966664774136267,0.9602898564975363},
	{-0.9681602395076261,-0.8360311073266358,-0.6133714327005904,-0.3242534234038089,0.0000000000000000,0.3242534234038089,0.6133714327005904,0.8360311073266358,0.9681602395076261},
	{-9.739065285171716e-01,-8.650633666889845e-01,-6.794095682990244e-01 ,-4.333953941292472e-01 ,-1.488743389816312e-01 ,1.488743389816312e-01 ,4.333953941292472e-01 ,6.794095682990244e-01 ,8.650633666889845e-01 ,9.739065285171716e-01 }

};


const double gauss_quadrature::W_[size_][size_]=
{
	{+2.000000000000000 },
	{+1.000000000000000, +1.000000000000000},
	{+0.555555555555556, +0.888888888888889, +0.555555555555556},
	{+0.347854845137454, +0.652145154862546, +0.652145154862546, +0.347854845137454},
	{+0.236926885056189, +0.478628670499366, +0.568888888888889, +0.478628670499366, +0.236926885056189},
	{+0.171324492379170, +0.360761573048139, +0.467913934572691, +0.467913934572691, +0.360761573048139, +0.171324492379170},
	{0.1294849661688697,0.2797053914892766,0.3818300505051189,0.4179591836734694,0.3818300505051189,0.2797053914892766,0.1294849661688697},
	{0.1012285362903763,0.2223810344533745,0.3137066458778873,0.3626837833783620,0.3626837833783620,0.3137066458778873,0.2223810344533745,0.1012285362903763},
	{0.0812743883615744,0.1806481606948574,0.2606106964029354,0.3123470770400029,0.3302393550012598,0.3123470770400029,0.2606106964029354,0.1806481606948574,0.0812743883615744},
	{6.667134430868814e-02,1.494513491505806e-01,2.190863625159820e-01,2.692667193099963e-01,2.955242247147529e-01,2.955242247147529e-01,2.692667193099963e-01,2.190863625159820e-01,1.494513491505806e-01,6.667134430868814e-02}
 
};






////////////////////////////////////////////////////////////
//// PUNTI DI QUADRATURA PER I TRIANGOLI
//// ATTENZIONE IN QUESTE FORMULE I PESI VANNO MOLTIPLICATI PER 1/2
double gauss_quadrature_tria::triangleGaussianQuadraturePoint[7][7][2]=
{	
	// FORMULA A 1 PUNTO
	{
		{0.333333333333333,0.333333333333333}
	},
	// FORMULA A 2 PUNTI :  non ha proprietà sensate
	{
		{0}
	},
	// FORMULA A 3 PUNTI
	{
		{0.6666666666666666,0.1666666666666666},
		{0.1666666666666666,0.6666666666666666},
		{0.1666666666666666,0.1666666666666666}
	},
	// FORMULA A 4 PUNTI
	{
		{0.333333333333333,0.333333333333333},
		{0.600000000000000,0.200000000000000},
		{0.200000000000000,0.600000000000000},
		{0.200000000000000,0.200000000000000}

	},
	// FORMULA A 5 PUNTI: non ha proprietà sensate
	{
		{0}
	},
	// FORMULA A 6 PUNTI
	{
		{0.816847572980459,0.091576213509771},
		{0.091576213509771,0.816847572980459},
		{0.091576213509771,0.091576213509771},
		{0.108103018168070,0.445948490915965},
		{0.445948490915965,0.108103018168070},
		{0.108103018168070,0.108103018168070}

	},
	// FORMULA A 7 PUNTI
	{
		{0.333333333333333,0.333333333333333},
		{0.797426985353087,0.101286507323456},
		{0.101286507323456,0.797426985353087},
		{0.101286507323456,0.101286507323456},
		{0.470142064105115,0.470142064105115},
		{0.059715871789770,0.470142064105115},
		{0.470142064105115,0.059715871789770}

	}
};


// PESI DI QUADRATURA PER I TRIANGOLI
double gauss_quadrature_tria::triangleGaussianQuadratureWeight[size_][size_]=
{	
	// FORMULA A 1 PUNTO
	{ 1.00000000000000},
	// FORMULA A 2 PUNTI
	{0},
	// FORMULA A 3 PUNTI
	{  0.333333333333333,0.333333333333333,0.333333333333333},
	// FORMULA A 4 PUNTI
	{ -0.562500000000000,0.520833333333333,0.520833333333333,0.520833333333333},
	// FORMULA A 5 PUNTI
	{0.0},
	// FORMULA A 6 PUNTI
	{ 0.109951743655322,0.109951743655322,0.109951743655322,0.223381589678011,0.223381589678011,0.223381589678011},
	// FORMULA A 7 PUNTI
	{0.225000000000000, 0.125939180544827,0.125939180544827,0.125939180544827,0.132394152788506,0.132394152788506,0.132394152788506}
};




//{
//	
//		throw std::runtime_error("MML::gauss_quadrature_tria::gauss_quadrature_tria(): bad initialization");
//	x_.resize(ng);
//	y_.resize(ng);
//	w_.resize(ng);
//	for(int g=0; g!= ng; ++g)
//	{
//		x_[g]=triangleGaussianQuadraturePoint[ng-1][g][0];
//		y_[g]=triangleGaussianQuadraturePoint[ng-1][g][1];
//		w_[g]=0.5 * triangleGaussianQuadratureWeight[ng-1][g];
//	}
//}
//
//
//	
//// seleziona la formula di integrazione a ng punti
//// ritorna il grado di precisione della formula 
//// se la formula non è implementata torna 0
//int gauss_quadrature_tria::set_points(int ng)
//{
//	
//	int order=0;
//	switch(ng)
//	{
//		case 1: order=1; break;
//		case 3: order=2; break;
//		case 4:	order=3; break;
//		case 6: order=3; break; // da verificare l'ordine
//		case 7:	order=4; break;
//		default: throw std::runtime_error("MML::gauss_quadrature_tria::set_points(...): formula di quadratura non implementata");
//	} // end switch
//
//	gauss_quadrature_tria tmp(ng);
//	swap_(tmp);
//	return order;
//}
//


} // end namespace MML